{% comment %}
  Renders a brand selector menu above the main header.
  
  Usage:
  {% section 'brand-selector' %}
{% endcomment %}

{% liquid
  # Get the selected brand from the URL parameter or cookie
  assign selected_brand = request.params.brand
  
  # If no brand is selected in URL, check for cookie
  if selected_brand == blank
    assign selected_brand = request.cookies.selected_brand
  endif
  
  # Make the selected brand available globally
  assign selected_brand_global = selected_brand
%}

<style>
  .brand-selector {
    display: flex;
    justify-content: center;
    padding: 5px 0;
    background-color: {{ section.settings.background_color }};
  }
  
  .brand-selector__list {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0px;
    gap: 20px;
    align-items: center;
    height: 30px;
  }
  
  .brand-selector__item {
    cursor: pointer;
  }
  
  .brand-selector__item--active {
    position: relative;
    background-color: white;
  }
  
  .brand-selector__item--active::after {
    /*content: '';*/
    /*position: absolute;*/
    /*bottom: -5px;*/
    /*left: 0;*/
    /*width: 100%;*/
    /*height: 20px;*/
    /*background-color: var(--brand-primary-color, currentColor);*/
  }
  
  .brand-selector__logo {
    display: block;
    height: 30px;
    width: auto;
    max-width: 100px;
    transition: opacity 0.2s ease;
  }
  
  .brand-selector__item:hover .brand-selector__logo {
    opacity: 0.8;
  }
  
  .brand-selector__item--active .brand-selector__logo {
    opacity: 1;
  }
</style>

<div class="brand-selector color-{{ section.settings.color_scheme }} gradient">
  <ul class="brand-selector__list" role="list">
    {% for block in section.blocks %}
      {% if block.type == 'brand' %}
        <li class="brand-selector__item{% if block.settings.brand_id == selected_brand_global %} brand-selector__item--active{% endif %}" 
            data-brand-id="{{ block.settings.brand_id }}"
            data-brand-menu-logo="{{ block.settings.brand_logo | img_url: 'master' }}"
            data-brand-header-logo="{{ block.settings.brand_header_logo | img_url: 'master' }}"
            data-brand-menu="{{ block.settings.brand_menu }}"
            data-brand-color-scheme="{{ block.settings.brand_color_scheme }}">
          <a href="#" onclick="selectBrand('{{ block.settings.brand_id }}'); return false;" title="{{ block.settings.brand_name }}">
            <img 
              src="{{ block.settings.brand_logo | img_url: 'master' }}" 
              alt="{{ block.settings.brand_name }}" 
              class="brand-selector__logo"
              width="100"
              loading="lazy"
            >
          </a>
        </li>
      {% endif %}
    {% endfor %}
  </ul>
</div>

<script>
  function selectBrand(brandId) {
    // Store the selected brand in a cookie (accessible server-side)
    document.cookie = "selected_brand=" + brandId + "; path=/; max-age=31536000"; // 1 year
    
    // Store in localStorage for backward compatibility
    localStorage.setItem('selectedBrand', brandId);
    
    // Redirect to the same page with brand parameter to avoid flash
    const url = new URL(window.location.href);
    url.searchParams.set('brand', brandId);
    window.location.href = url.toString();
  }
  
  // On page load, ensure localStorage is in sync with cookie for backward compatibility
  document.addEventListener('DOMContentLoaded', function() {
    const selectedBrand = "{{ selected_brand_global }}";
    
    if (selectedBrand) {
      // Store in localStorage for backward compatibility
      localStorage.setItem('selectedBrand', selectedBrand);
      
      // Set data attribute for CSS targeting
      document.documentElement.setAttribute('data-selected-brand', selectedBrand);
      
      // Apply color scheme from the selected brand element
      const brandElement = document.querySelector(`[data-brand-id="${selectedBrand}"]`);
      if (brandElement) {
        const colorScheme = brandElement.getAttribute('data-brand-color-scheme');
        if (colorScheme) {
          document.documentElement.style.setProperty('--color-scheme', colorScheme);
        }
      }
    }
  });
</script>

{% schema %}
{
  "name": "Brand Selector",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "background-1"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f3f3f3"
    }
  ],
  "blocks": [
    {
      "type": "brand",
      "name": "Brand",
      "limit": 10,
      "settings": [
        {
          "type": "text",
          "id": "brand_name",
          "label": "Brand name",
          "default": "Brand name"
        },
        {
          "type": "text",
          "id": "brand_id",
          "label": "Brand ID (unique identifier)",
          "default": "brand1"
        },
        {
          "type": "image_picker",
          "id": "brand_logo",
          "label": "Brand menu logo",
          "info": "Logo displayed in the brand selector menu. Upload SVG or PNG files. Recommended height: 30px"
        },
        {
          "type": "image_picker",
          "id": "brand_header_logo",
          "label": "Brand header logo",
          "info": "Logo displayed in the Shopify header when this brand is selected"
        },
        {
          "type": "link_list",
          "id": "brand_menu",
          "label": "Brand menu"
        },
        {
          "type": "color_scheme",
          "id": "brand_color_scheme",
          "label": "Brand color scheme",
          "default": "background-1"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Brand Selector",
      "blocks": [
        {
          "type": "brand"
        },
        {
          "type": "brand"
        },
        {
          "type": "brand"
        }
      ]
    }
  ]
}
{% endschema %}
